package io.a2a.spec;

import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import io.a2a.util.Assert;

/**
 * Represents outputs generated by an agent during a task execution.
 * Artifacts are the deliverables or results produced by agents, such as generated files,
 * processed data, or any other structured output. Each artifact contains one or more
 * content parts and associated metadata.
 *
 * @param artifactId unique identifier for this artifact
 * @param name human-readable name for this artifact
 * @param description optional description explaining what this artifact contains
 * @param parts the content parts that make up this artifact (must not be empty)
 * @param metadata additional metadata associated with this artifact
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonIgnoreProperties(ignoreUnknown = true)
public record Artifact(String artifactId, String name, String description, List<Part<?>> parts, Map<String, Object> metadata) {

    /**
     * Compact constructor that validates the artifact parameters.
     * <p>
     * This constructor ensures that the artifact ID and parts are not null,
     * and that the parts list is not empty, as artifacts must contain content.
     * </p>
     *
     * @throws IllegalArgumentException if artifactId is null, parts is null, or parts is empty
     */
    public Artifact {
        Assert.checkNotNullParam("artifactId", artifactId);
        Assert.checkNotNullParam("parts", parts);
        if (parts.isEmpty()) {
            throw new IllegalArgumentException("Parts cannot be empty");
        }
    }

    /**
     * Builder class for constructing {@link Artifact} instances.
     */
    public static class Builder {
        private String artifactId;
        private String name;
        private String description;
        private List<Part<?>> parts;
        private Map<String, Object> metadata;

        /**
         * Creates a new empty Builder.
         */
        public Builder(){
        }

        /**
         * Creates a new Builder initialized with values from an existing Artifact.
         *
         * @param existingArtifact the artifact to copy values from
         */
        public Builder(Artifact existingArtifact) {
            artifactId = existingArtifact.artifactId;
            name = existingArtifact.name;
            description = existingArtifact.description;
            parts = existingArtifact.parts;
            metadata = existingArtifact.metadata;
        }

        /**
         * Sets the unique identifier for this artifact.
         *
         * @param artifactId the artifact ID
         * @return this builder instance
         */
        public Builder artifactId(String artifactId) {
            this.artifactId = artifactId;
            return this;
        }

        /**
         * Sets the human-readable name for this artifact.
         *
         * @param name the artifact name
         * @return this builder instance
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Sets the description explaining what this artifact contains.
         *
         * @param description the artifact description
         * @return this builder instance
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Sets the content parts that make up this artifact.
         *
         * @param parts the list of content parts (must not be empty)
         * @return this builder instance
         */
        public Builder parts(List<Part<?>> parts) {
            this.parts = parts;
            return this;
        }

        /**
         * Sets the content parts that make up this artifact using varargs.
         *
         * @param parts the content parts as varargs (must not be empty)
         * @return this builder instance
         */
        public Builder parts(Part<?>... parts) {
            this.parts = List.of(parts);
            return this;
        }

        /**
         * Sets the additional metadata associated with this artifact.
         *
         * @param metadata the metadata map
         * @return this builder instance
         */
        public Builder metadata(Map<String, Object> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Builds and returns a new {@link Artifact} instance with the configured properties.
         *
         * @return a new Artifact instance
         * @throws IllegalArgumentException if artifactId is null, parts is null, or parts is empty
         */
        public Artifact build() {
            return new Artifact(artifactId, name, description, parts, metadata);
        }
    }
}
